{"/home/travis/build/npmtest/node-npmtest-ember-cli-fastboot/test.js":"/* istanbul instrument in package npmtest_ember_cli_fastboot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-fastboot/lib.npmtest_ember_cli_fastboot.js":"/* istanbul instrument in package npmtest_ember_cli_fastboot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_cli_fastboot = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_cli_fastboot = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-fastboot/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-cli-fastboot && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_cli_fastboot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_cli_fastboot\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_cli_fastboot.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_cli_fastboot.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_cli_fastboot.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_cli_fastboot.__dirname + '/lib.npmtest_ember_cli_fastboot.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-fastboot/node_modules/ember-cli-fastboot/index.js":"/* eslint-env node */\n'use strict';\n\nvar path = require('path');\n\nvar EventEmitter = require('events').EventEmitter;\nvar mergeTrees = require('broccoli-merge-trees');\nvar VersionChecker = require('ember-cli-version-checker');\n\nvar patchEmberApp     = require('./lib/ext/patch-ember-app');\nvar fastbootAppModule = require('./lib/utilities/fastboot-app-module');\n\nvar filterInitializers = require('fastboot-filter-initializers');\nvar FastBootBuild      = require('./lib/broccoli/fastboot-build');\n\n/*\n * Main entrypoint for the Ember CLI addon.\n */\n\nmodule.exports = {\n  name: 'ember-cli-fastboot',\n\n  init() {\n    this._super.init && this._super.init.apply(this, arguments);\n\n    this.emitter = new EventEmitter();\n  },\n\n  includedCommands: function() {\n    return {\n      'fastboot':       require('./lib/commands/fastboot')(this),\n\n      /* fastboot:build is deprecated and will be removed in a future version */\n      'fastboot:build': require('./lib/commands/fastboot-build')\n    };\n  },\n\n  on: function() {\n    this.emitter.on.apply(this.emitter, arguments);\n  },\n\n  emit: function() {\n    this.emitter.emit.apply(this.emitter, arguments);\n  },\n\n  /**\n   * Called at the start of the build process to let the addon know it will be\n   * used. At this point, we can rely on the EMBER_CLI_FASTBOOT environment\n   * variable being set.\n   *\n   * Once we've determined which mode we're in (browser build or FastBoot build),\n   * we mixin additional Ember addon hooks appropriate to the current build target.\n   */\n  included: function(app) {\n    patchEmberApp(app);\n  },\n\n  config: function() {\n    if (this.app && this.app.options.__is_building_fastboot__) {\n      return { APP: { autoboot: false } };\n    }\n  },\n\n  /**\n   * Inserts placeholders into index.html that are used by the FastBoot server\n   * to insert the rendered content into the right spot. Also injects a module\n   * for FastBoot application boot.\n   */\n  contentFor: function(type, config, contents) {\n    if (type === 'body') {\n      return \"<!-- EMBER_CLI_FASTBOOT_BODY -->\";\n    }\n\n    if (type === 'head') {\n      return \"<!-- EMBER_CLI_FASTBOOT_TITLE --><!-- EMBER_CLI_FASTBOOT_HEAD -->\";\n    }\n\n    if (type === 'app-boot') {\n      return fastbootAppModule(config.modulePrefix);\n    }\n\n    if (type === 'config-module' && this.app.options.__is_building_fastboot__) {\n      var linesToRemove = contents.length;\n      while(linesToRemove) {\n        // Clear out the default config from ember-cli\n        contents.pop();\n        linesToRemove--;\n      }\n\n      return 'return FastBoot.config();';\n    }\n  },\n\n  treeForApp: function(defaultTree) {\n    var trees = [defaultTree];\n\n    if (this._getEmberVersion().lt('2.10.0-alpha.1')) {\n      trees.push(this.treeGenerator(path.resolve(this.root, 'app-lt-2-9')));\n    }\n\n    return mergeTrees(trees, { overwrite: true });\n  },\n\n  /**\n   * Filters out initializers and instance initializers that should only run in\n   * browser mode.\n   */\n  preconcatTree: function(tree) {\n    return filterInitializers(tree, this.app.name);\n  },\n\n  /**\n   * After the entire Broccoli tree has been built for the `dist` directory,\n   * adds the `fastboot-config.json` file to the root.\n   *\n   * FASTBOOT_DISABLED is a pre 1.0 power user flag to\n   * disable the fastboot build while retaining the fastboot service.\n   */\n  postprocessTree: function(type, tree) {\n    if (type === 'all' && !process.env.FASTBOOT_DISABLED) {\n      var fastbootTree = this.buildFastBootTree();\n\n      // Merge the package.json with the existing tree\n      return mergeTrees([tree, fastbootTree], {overwrite: true});\n    }\n\n    return tree;\n  },\n\n  buildFastBootTree: function() {\n    var fastbootBuild = new FastBootBuild({\n      ui: this.ui,\n      assetMapPath: this.assetMapPath,\n      project: this.project,\n      app: this.app,\n      parent: this.parent\n    });\n\n    return fastbootBuild.toTree();\n  },\n\n  outputReady: function() {\n    this.emit('outputReady');\n  },\n\n  postBuild: function() {\n    this.emit('postBuild');\n  },\n\n  _getEmberVersion: function() {\n    var VersionChecker = require('ember-cli-version-checker');\n    var checker = new VersionChecker(this);\n    var emberVersionChecker = checker.for('ember-source', 'npm');\n\n    if (emberVersionChecker.version) {\n      return emberVersionChecker;\n    }\n\n    return checker.for('ember', 'bower');\n  },\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-fastboot/node_modules/ember-cli-fastboot/lib/ext/patch-ember-app.js":"/**\n * Monkeypatches the EmberApp instance from Ember CLI to contain the hooks we\n * need to filter environment-specific initializers. Hopefully we can upstream\n * similar hooks to Ember CLI and eventually remove these patches.\n */\nfunction patchEmberApp(emberApp) {\n  // App was already patched\n  if (emberApp.addonPreconcatTree) { return; }\n\n  // Save off original implementation of the `concatFiles` hook\n  var concatDeprecated = emberApp._concatFiles !== undefined;\n  var originalConcatFiles = concatDeprecated ? emberApp._concatFiles : emberApp.concatFiles;\n\n  // Install method to invoke `preconcatTree` hook on each addon\n  emberApp.addonPreconcatTree = addonPreconcatTree;\n\n  // Install patched `concatFiles` method. This checks options passed to it\n  // and, if it detects that it's a concat for the app tree, invokes our\n  // preconcat hook. Afterwards, we invoke the original implementation to\n  // return a tree concating the files.\n  var concatFiles = function(tree, options) {\n    if (options.annotation === 'Concat: App') {\n      tree = this.addonPreconcatTree(tree);\n    }\n    return originalConcatFiles.apply(this, arguments);\n  };\n  if (concatDeprecated) {\n    emberApp._concatFiles = concatFiles;\n  } else {\n    emberApp.concatFiles = concatFiles;\n  }\n\n}\n\nfunction addonPreconcatTree(tree) {\n  var workingTree = tree;\n\n  this.project.addons.forEach(function(addon) {\n    if (addon.preconcatTree) {\n      workingTree = addon.preconcatTree(workingTree);\n    }\n  });\n\n  return workingTree;\n}\n\nmodule.exports = patchEmberApp;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-fastboot/node_modules/ember-cli-fastboot/lib/utilities/fastboot-app-module.js":"// Expose the an factory for the creating the `Application` object\n// with the proper config at a known path, so that the server does\n// not have to disover the app's module prefix (\"my-app\").\n//\n// The module defined here is prefixed with a `~` to make it less\n// likely to collide with user code, since it is not possible to\n// define a module with a name like this in the file system.\nfunction fastbootAppModule(prefix) {\n  return [\n    \"\",\n    \"define('~fastboot/app-factory', ['{{MODULE_PREFIX}}/app', '{{MODULE_PREFIX}}/config/environment'], function(App, config) {\",\n    \"  App = App['default'];\",\n    \"  config = config['default'];\",\n    \"\",\n    \"  return {\",\n    \"    'default': function() {\",\n    \"      return App.create(config.APP);\",\n    \"    }\",\n    \"  };\",\n    \"});\",\n    \"\"\n  ].join(\"\\n\").replace(/\\{\\{MODULE_PREFIX\\}\\}/g, prefix);\n}\n\nmodule.exports = fastbootAppModule;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-fastboot/node_modules/ember-cli-fastboot/lib/broccoli/fastboot-build.js":"var Funnel = require('broccoli-funnel');\nvar Plugin = require('broccoli-plugin');\nvar defaults = require('lodash.defaults');\n\n// The EmptyTree just returns a broccoli tree with no files\n// into it so broccoli doesn't try to read a tree from\n// undefined.\nEmptyTree.prototype = Object.create(Plugin.prototype);\nEmptyTree.prototype.constructor = EmptyTree;\nfunction EmptyTree(inputNodes, options) {\n  options = options || {};\n  this.persistentOutput = options.persistentOutput = true;\n  Plugin.call(this, inputNodes, options);\n  this.options = options;\n}\n\nEmptyTree.prototype.build = function() { };\n\nfunction FastBootBuild(options) {\n  this.project = options.project;\n  var defaultAssetMapPath = 'assets/assetMap.json';\n  var assetRev = this.project.addons.filter(function(addon) {\n    return addon.name === 'broccoli-asset-rev';\n  })[0];\n\n  if (assetRev && assetRev.options) {\n    this.assetMapEnabled = !!(assetRev.options.enabled && assetRev.options.generateAssetMap);\n\n    if (assetRev.options.assetMapPath) {\n      this.assetMapPath = assetRev.options.assetMapPath;\n    }\n\n    if (assetRev.options.fingerprintAssetMap) {\n      defaultAssetMapPath = 'assets/assetMap-*.json'\n    }\n  }\n\n  this.assetMapPath = this.assetMapPath || options.assetMapPath || defaultAssetMapPath;\n  this.ui = options.ui;\n  this.options = options;\n  this.app = options.app;\n  this.name = this.app.name;\n  this.parent = options.parent;\n}\n\n/**\n * Creates a new EmberApp instance (from Ember CLI) and configures it to build\n * for FastBoot. This tree for the FastBoot build is returned and later merged\n * with the initial browser build.\n */\nFastBootBuild.prototype.toTree = function() {\n  var env = process.env;\n\n  // This method will be called again when we create the new EmberApp below.\n  // This is to prevent infinite recursion.\n  if (this.app.options.__is_building_fastboot__) {\n    return new EmptyTree([]);\n  }\n\n  // Set the EMBER_CLI_FASTBOOT environment variable. This serves as a hint\n  // for other addons that they should build their trees configured for the\n  // FastBoot build.\n  //\n  // In the future, ideally we can remove this environment variable and there\n  // would be a more explicit way to tell addons what the build target is.\n  env.EMBER_CLI_FASTBOOT = true;\n\n  var options = this.appOptions();\n\n  // re-require with env.EMBER_CLI_FASTBOOT on\n  var path = require('path');\n  var emberBuildFile = path.join(this.project.root, 'ember-cli-build.js');\n  var emberApp = require(emberBuildFile)(options);\n\n  // Because this will be merged with the browser build, move the FastBoot\n  // build's assets to the fastboot directory.\n  //\n  var stew = require('broccoli-stew');\n\n  var fastbootTree = new Funnel(emberApp, {\n    srcDir: '/',\n    include: ['assets/**/*.js', '**/*.json']\n  });\n\n  fastbootTree = stew.mv(fastbootTree, this.assetMapPath, '/fastbootAssetMap.json');\n  fastbootTree = stew.mv(fastbootTree, 'assets/*.*', 'fastboot/');\n\n  delete env.EMBER_CLI_FASTBOOT;\n\n  var configTree = this.buildConfigTree(fastbootTree);\n  var merge = require('broccoli-merge-trees');\n\n  return merge([fastbootTree, configTree], {overwrite: true});\n};\n\n/**\n * Builds the options passed to the EmberApp constructor.  Most importantly, it\n * disables the autorun and overrides the project to provide a config that is\n * FastBoot compatible.\n */\nFastBootBuild.prototype.appOptions = function() {\n  return defaults({\n    autoRun: false,\n    fingerprint: {\n      generateAssetMap: true\n    },\n    project: this.buildFastBootProject(),\n    __is_building_fastboot__: true,\n  });\n};\n\nFastBootBuild.prototype.buildConfigTree = function(tree) {\n  var FastBootConfig = require('./fastboot-config');\n  var env = this.app.env;\n  var config = this.project.config(env);\n  var fastbootConfig = config.fastboot;\n\n  // Create a new Broccoli tree that writes the FastBoot app's\n  // `package.json`.\n  return new FastBootConfig(tree, {\n    project: this.project,\n    name: this.app.name,\n    assetMapEnabled: this.assetMapEnabled,\n    outputPaths: this.app.options.outputPaths,\n    ui: this.ui,\n    fastbootAppConfig: fastbootConfig,\n    appConfig: config\n  });\n};\n\n/**\n * Because the config information is not read until build time, the\n * EMBER_CLI_FASTBOOT environment variable is not set when the FastBoot\n * build actually happens.\n *\n * To get around this, we give the FastBoot tree a reference to a project\n * that is modified to always return a FastBoot-compatible config.\n */\nFastBootBuild.prototype.buildFastBootProject = function() {\n  var Project = require('ember-cli/lib/models/project');\n  var oldProject = this.project;\n  var project = new Project(oldProject.root, oldProject.pkg, oldProject.ui, oldProject.cli);\n\n  return this.project = project;\n};\n\nmodule.exports = FastBootBuild;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-fastboot/node_modules/ember-cli-fastboot/config/environment.js":"/* eslint-env node */\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-fastboot/node_modules/ember-cli-fastboot/app/locations/none.js":"import Ember from 'ember';\n\nconst {\n  computed,\n  computed: { bool, readOnly },\n  inject: { service },\n  get,\n  getOwner\n} = Ember;\n\nconst TEMPORARY_REDIRECT_CODE = 307;\n\nexport default Ember.NoneLocation.extend({\n  implementation: 'fastboot',\n  fastboot: service(),\n\n  _config: computed(function () {\n    return getOwner(this).resolveRegistration('config:environment');\n  }),\n\n  _fastbootHeadersEnabled: bool('_config.fastboot.fastbootHeaders'),\n\n  _redirectCode: computed(function () {\n    return get(this, '_config.fastboot.redirectCode') || TEMPORARY_REDIRECT_CODE;\n  }),\n\n  _response: readOnly('fastboot.response'),\n  _request: readOnly('fastboot.request'),\n\n  setURL(path) {\n    if (get(this, 'fastboot.isFastBoot')) {\n      let response = get(this, '_response');\n      let currentPath = get(this, 'path');\n      let isInitialPath = !currentPath || currentPath.length === 0;\n\n      if (!isInitialPath) {\n        path = this.formatURL(path);\n        let isTransitioning = currentPath !== path;\n\n        if (isTransitioning) {\n          let protocol = get(this, '_request.protocol');\n          let host = get(this, '_request.host');\n          let redirectURL = `${protocol}://${host}${path}`;\n\n          response.statusCode = this.get('_redirectCode');\n          response.headers.set('location', redirectURL);\n        }\n      }\n\n      // for testing and debugging\n      if(get(this, '_fastbootHeadersEnabled')) {\n        response.headers.set('x-fastboot-path', path);\n      }\n    }\n\n    this._super(...arguments);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-fastboot/node_modules/ember-cli-fastboot/app/services/fastboot.js":"/* global FastBoot */\nimport Ember from \"ember\";\n\nconst { deprecate, computed, get } = Ember;\nconst { deprecatingAlias, readOnly } = computed;\n\nconst RequestObject = Ember.Object.extend({\n  init() {\n    this._super(...arguments);\n\n    let request = this.request;\n    delete this.request;\n\n    this.cookies = request.cookies;\n    this.headers = request.headers;\n    this.queryParams = request.queryParams;\n    this.path = request.path;\n    this.protocol = request.protocol;\n    this._host = function() {\n      return request.host();\n    };\n  },\n\n  host: computed(function() {\n    return this._host();\n  })\n});\n\nconst Shoebox = Ember.Object.extend({\n  put(key, value) {\n    Ember.assert('shoebox.put is only invoked from the FastBoot rendered application', this.get('fastboot.isFastBoot'));\n    Ember.assert('the provided key is a string', typeof key === 'string');\n\n    let fastbootInfo = this.get('fastboot._fastbootInfo');\n    if (!fastbootInfo.shoebox) { fastbootInfo.shoebox = {}; }\n\n    fastbootInfo.shoebox[key] = value;\n  },\n\n  retrieve(key) {\n    if (this.get('fastboot.isFastBoot')) {\n      let shoebox = this.get('fastboot._fastbootInfo.shoebox');\n      if (!shoebox) { return; }\n\n      return shoebox[key];\n    }\n\n    let shoeboxItem = this.get(key);\n    if (shoeboxItem) { return shoeboxItem; }\n\n    let el = document.querySelector(`#shoebox-${key}`);\n    if (!el) { return; }\n    let valueString = el.textContent;\n    if (!valueString) { return; }\n\n    shoeboxItem = JSON.parse(valueString);\n    this.set(key, shoeboxItem);\n\n    return shoeboxItem;\n  }\n});\n\nconst FastBootService = Ember.Service.extend({\n  cookies: deprecatingAlias('request.cookies', { id: 'fastboot.cookies-to-request', until: '0.9.9' }),\n  headers: deprecatingAlias('request.headers', { id: 'fastboot.headers-to-request', until: '0.9.9' }),\n  isFastBoot: typeof FastBoot !== 'undefined',\n\n  init() {\n    this._super(...arguments);\n\n    let shoebox = Shoebox.create({ fastboot: this });\n    this.set('shoebox', shoebox);\n  },\n\n  host: computed(function() {\n    deprecate(\n      'Usage of fastboot service\\'s `host` property is deprecated.  Please use `request.host` instead.',\n      false,\n      { id: 'fastboot.host-to-request', until: '0.9.9' }\n    );\n\n    return this._fastbootInfo.request.host();\n  }),\n\n  response: readOnly('_fastbootInfo.response'),\n  metadata: readOnly('_fastbootInfo.metadata'),\n\n  request: computed(function() {\n    if (!this.isFastBoot) return null;\n    return RequestObject.create({ request: get(this, '_fastbootInfo.request') });\n  }),\n\n  deferRendering(promise) {\n    Ember.assert('deferRendering requires a promise or thennable object', typeof promise.then === 'function');\n    this._fastbootInfo.deferRendering(promise);\n  }\n});\n\nexport default FastBootService;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-fastboot/node_modules/ember-cli-fastboot/lib/broccoli/fastboot-config.js":"var fs     = require('fs');\nvar fmt    = require('util').format;\nvar uniq   = require('lodash.uniq');\nvar md5Hex = require('md5-hex');\nvar path   = require('path');\nvar Plugin = require('broccoli-plugin');\n\nvar LATEST_SCHEMA_VERSION = 2;\n\nfunction FastBootConfig(inputNode, options) {\n  Plugin.call(this, [inputNode], {\n    annotation: \"Generate: FastBoot package.json\"\n  });\n\n  this.project = options.project;\n  this.name = options.name;\n  this.assetMapEnabled = options.assetMapEnabled;\n  this.ui = options.ui;\n  this.fastbootAppConfig = options.fastbootAppConfig;\n  this.outputPaths = options.outputPaths;\n  this.appConfig = options.appConfig;\n  this._fileToChecksumMap = {};\n\n  if (this.fastbootAppConfig && this.fastbootAppConfig.htmlFile) {\n    this.htmlFile = this.fastbootAppConfig.htmlFile;\n  } else {\n    this.htmlFile = 'index.html';\n  }\n}\n\nFastBootConfig.prototype = Object.create(Plugin.prototype);\nFastBootConfig.prototype.constructor = FastBootConfig;\n\n/**\n * The main hook called by Broccoli Plugin. Used to build or\n * rebuild the tree. In this case, we generate the configuration\n * and write it to `package.json`.\n */\nFastBootConfig.prototype.build = function() {\n  this.buildDependencies();\n  this.buildManifest();\n  this.buildHostWhitelist();\n\n  var outputPath = path.join(this.outputPath, 'package.json');\n  this.writeFileIfContentChanged(outputPath, this.toJSONString());\n};\n\nFastBootConfig.prototype.writeFileIfContentChanged = function(outputPath, content) {\n  var previous = this._fileToChecksumMap[outputPath];\n  var next = md5Hex(content);\n\n  if (previous !== next || !fs.existsSync(outputPath)) {\n    fs.writeFileSync(outputPath, content);\n    this._fileToChecksumMap[outputPath] = next; // update map\n  }\n};\n\nFastBootConfig.prototype.buildDependencies = function() {\n  var dependencies = {};\n  var moduleWhitelist = [];\n  var ui = this.ui;\n\n  eachAddonPackage(this.project, function(pkg) {\n    var deps = getFastBootDependencies(pkg, ui);\n\n    if (deps) {\n      deps.forEach(function(dep) {\n        var version = getDependencyVersion(pkg, dep);\n\n        if (dep in dependencies) {\n          version = dependencies[dep];\n          ui.writeLine(fmt(\"Duplicate FastBoot dependency %s. Versions may mismatch. Using range %s.\", dep, version), ui.WARNING);\n          return;\n        }\n\n        moduleWhitelist.push(dep);\n\n        if (version) {\n          dependencies[dep] = version;\n        }\n      });\n    }\n  });\n\n  var pkg = this.project.pkg;\n  var projectDeps = pkg.fastbootDependencies;\n\n  if (projectDeps) {\n    projectDeps.forEach(function(dep) {\n      moduleWhitelist.push(dep);\n\n      var version = pkg.dependencies && pkg.dependencies[dep];\n      if (version) {\n        dependencies[dep] = version;\n      }\n    });\n  }\n\n  this.dependencies = dependencies;\n  this.moduleWhitelist = uniq(moduleWhitelist);\n};\n\nFastBootConfig.prototype.readAssetManifest = function() {\n  var ui = this.ui;\n  var assetMapPath = path.join(this.inputPaths[0], 'fastbootAssetMap.json');\n  var assetMapEnabled = this.assetMapEnabled;\n\n  try {\n    var assetMap = JSON.parse(fs.readFileSync(assetMapPath));\n    return assetMap;\n  } catch (e) {\n    if (this.assetMapEnabled) {\n      ui.writeLine(fmt(\"fastbootAssetMap.json not found at: %s\", assetMapPath), ui.WARNING);\n    }\n  }\n};\n\nFastBootConfig.prototype.buildManifest = function() {\n  var appFileName = path.basename(this.outputPaths.app.js).split('.')[0];\n  var appFile = 'fastboot/' + appFileName + '.js';\n  var vendorFileName = path.basename(this.outputPaths.vendor.js).split('.')[0];\n  var vendorFile = 'fastboot/' + vendorFileName + '.js';\n\n  var manifest = {\n    appFiles: [appFile],\n    vendorFiles: [vendorFile],\n    htmlFile: this.htmlFile\n  };\n\n  var rewrittenAssets = this.readAssetManifest();\n\n  if (rewrittenAssets) {\n    var assets = {};\n\n    // Because the assetMap was written before the files in the\n    // `asset` folder were moved to the `fastboot` folder,\n    // we have to rewrite them here.\n    for (var key in rewrittenAssets.assets) {\n      var rewrittenKey = assetToFastboot(key);\n      assets[rewrittenKey] = assetToFastboot(rewrittenAssets.assets[key]);\n    }\n\n    // update the vendor file with the fingerprinted file\n    var rewrittenVendorFiles = [];\n    manifest['vendorFiles'].forEach(function(file) {\n      rewrittenVendorFiles.push(assets[file]);\n    });\n    manifest['vendorFiles'] = rewrittenVendorFiles;\n\n    // update the app files array with fingerprinted files\n    var rewrittenAppFiles = [];\n    manifest['appFiles'].forEach(function(file) {\n      rewrittenAppFiles.push(assets[file]);\n    });\n    manifest['appFiles'] = rewrittenAppFiles;\n\n  }\n\n  this.manifest = manifest;\n};\n\nFastBootConfig.prototype.buildHostWhitelist = function() {\n  if (!!this.fastbootAppConfig) {\n    this.hostWhitelist = this.fastbootAppConfig.hostWhitelist;\n  }\n};\n\nFastBootConfig.prototype.toJSONString = function() {\n  return JSON.stringify({\n    dependencies: this.dependencies,\n    fastboot: {\n      moduleWhitelist: this.moduleWhitelist,\n      schemaVersion: LATEST_SCHEMA_VERSION,\n      manifest: this.manifest,\n      hostWhitelist: this.normalizeHostWhitelist(),\n      appConfig: this.appConfig\n    }\n  }, null, 2);\n};\n\nFastBootConfig.prototype.normalizeHostWhitelist = function() {\n  if (!this.hostWhitelist) {\n    return;\n  }\n\n  return this.hostWhitelist.map(function(entry) {\n    // Is a regex\n    if (entry.source) {\n      return '/' + entry.source + '/';\n    } else {\n      return entry;\n    }\n  });\n};\n\nfunction eachAddonPackage(project, cb) {\n  project.addons.map(function(addon) {\n    cb(addon.pkg);\n  });\n}\n\nfunction getFastBootDependencies(pkg, ui) {\n  var addon = pkg['ember-addon'];\n  if (!addon) {\n    return addon;\n  }\n\n  var deps = addon.fastBootDependencies;\n  if (deps) {\n    ui.writeDeprecateLine('ember-addon.fastBootDependencies has been replaced with ember-addon.fastbootDependencies [addon: ' + pkg.name + ']');\n    return deps;\n  }\n\n  return addon.fastbootDependencies;\n}\n\nfunction getDependencyVersion(pkg, dep) {\n  if (!pkg.dependencies) {\n    throw new Error(fmt(\"Could not find FastBoot dependency '%s' in %s/package.json dependencies.\", dep, pkg.name));\n  }\n\n  return pkg.dependencies[dep];\n}\n\nmodule.exports = FastBootConfig;\n\nfunction assetToFastboot(key) {\n  var parts = key.split('/');\n  var dir = parts[0];\n  if (dir === 'assets') {\n    parts[0] = 'fastboot';\n  }\n  return parts.join('/');\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-fastboot/node_modules/ember-cli-fastboot/lib/tasks/fastboot-server.js":"'use strict';\n\nconst RSVP = require('rsvp');\nconst CoreObject = require('core-object');\nconst debug = require('debug')('ember-cli-fastboot/server');\nconst exec = RSVP.denodeify(require('child_process').exec);\nconst http = require('http');\nconst path = require('path');\nconst parseStackTrace = require('../utilities/parse-stack-trace');\n\nmodule.exports = CoreObject.extend({\n\n  exec,\n  http,\n  httpServer: null,\n  fastboot: null,\n  nextSocketId: 0,\n  require,\n  restartAgain: false,\n  restartPromise: null,\n  sockets: {},\n\n  run(options) {\n    debug('run');\n    const ready = () => this.outputReady(options);\n    this.addon.on('outputReady', ready);\n  },\n\n  start(options) {\n    debug('start');\n\n    const fastbootMiddleware = this.require('fastboot-express-middleware');\n    const FastBoot = this.require('fastboot');\n    const express = this.require('express');\n\n    this.fastboot = new FastBoot({\n      distPath: options.outputPath\n    });\n\n    const middleware = fastbootMiddleware({\n      outputPath: options.outputPath,\n      fastboot: this.fastboot\n    });\n\n    const app = express();\n    app.use(require('compression')());\n\n    if (options.serveAssets) {\n      app.get('/', middleware);\n      app.use(express.static(options.assetsPath));\n    }\n    app.get('/*', middleware);\n    app.use((req, res) => res.sendStatus(404));\n\n    this.httpServer = this.http.createServer(app);\n\n    // Track open sockets for fast restart\n    this.httpServer.on('connection', (socket) => {\n      const socketId = this.nextSocketId++;\n      debug(`open socket ${socketId}`);\n      this.sockets[socketId] = socket;\n      socket.on('close', () => {\n        debug(`close socket ${socketId}`);\n        delete this.sockets[socketId];\n      });\n    });\n\n    return new RSVP.Promise((resolve, reject) => {\n      this.httpServer.listen(options.port, options.host, (err) => {\n        if (err) { return reject(err); }\n        const o = this.httpServer.address();\n        const port = o.port;\n        const family = o.family;\n        let host = o.address;\n        if (family === 'IPv6') { host = `[${host}]`; }\n        this.ui.writeLine(`Ember FastBoot running at http://${host}:${port}`);\n        resolve();\n      });\n    });\n  },\n\n  stop() {\n    debug('stop');\n    return new RSVP.Promise((resolve, reject) => {\n      if (!this.httpServer) { return resolve(); }\n\n      // Stop accepting new connections\n      this.httpServer.close((err) => {\n        debug('close', Object.keys(this.sockets));\n        if (err) { return reject(err); }\n        this.httpServer = null;\n        resolve();\n      });\n\n      // Force close existing connections\n      Object.keys(this.sockets).forEach(k => this.sockets[k].destroy());\n    });\n  },\n\n  restart() {\n    return this.fastboot.reload();\n  },\n\n  outputReady(options) {\n    if (this.fastboot) {\n      this.ui.writeLine(`Reloading FastBoot`);\n      return this.restart();\n    } else {\n      return this.start(options)\n        .catch(e => this.printError(e));\n    }\n  },\n\n  /*\n   * Try to show a useful error message if we're not able to start the user's\n   * app in FastBoot.\n   */\n  printError: function(e) {\n    var preamble = [\"There was an error trying to run your application in FastBoot.\\n\",\n      \"This is usually caused by either your application code or an addon trying to access \" +\n      \"an API that isn't available in Node.js.\"];\n\n    var stackInfo = parseStackTrace(e);\n\n    var fileName = stackInfo.fileName;\n    var lineNumber = stackInfo.lineNumber;\n\n    if (fileName) {\n      // Print file name and line number from the top of the stack. This is displayed\n      // anyway, of course, but not everyone knows how to read a stack trace. This makes\n      // it more obvious.\n      var badFilePath = path.relative(process.cwd(), fileName);\n      preamble.push(\"Based on the stack trace, it looks like the exception was generated in \" + badFilePath + \" on line \" + lineNumber + \".\");\n\n      // If the exception is coming from `vendor.js`, that usually means it's from an addon and thus may be\n      // out of the user's control. Give the user some instructions so they can try to figure out which\n      // addon is causing the problem.\n      if (fileName.substr(-9) === 'vendor.js') {\n        preamble.push(\"Because it's coming from vendor.js, an addon is most likely responsible for this error. You should look at this \" +\n                      \"file and line number to determine which addon is not yet FastBoot compatible.\");\n\n      } else {\n        preamble.push(\"The exception is probably coming from your app. Look at this file and line number to determine what is triggering the exception.\");\n      }\n\n      preamble.push(\"\\nThe full stack trace is:\");\n    }\n\n    this.ui.writeError(preamble.join('\\n') + '\\n');\n    this.ui.writeError(e);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-fastboot/node_modules/ember-cli-fastboot/lib/utilities/parse-stack-trace.js":"/*\n * Helper function that parses the stack trace of an Error object\n * and extracts the file name and line number where the exception\n * was thrown.\n */\nmodule.exports = function(e) {\n  // If there's a stack trace available, try to extract some information for\n  // it so we can generate a more helpful error message.\n  var fileName = null;\n  var lineNumber = null;\n\n  if (e && e.stack) {\n    // Look at the stack trace line by line\n    var stack = e.stack.split('\\n');\n\n    // Verify there's a second line with path information.\n    // (First line is the error message itself.)\n    if (stack[1]) {\n      // Extract path and line number information. An example line looks like either:\n      //     at /Users/monegraph/Code/fastboot-test/dist/fastboot/vendor.js:65045:19\n      // or\n      //     at Module.callback (/Users/monegraph/Code/fastboot-test/dist/fastboot/fastboot-test.js:23:31)\n      var match = stack[1].match(/\\s*(?:at .* \\(([^:]+):(\\d+):(\\d+)|at ([^:]+):(\\d+):(\\d+)$)/);\n      if (match) {\n        fileName = match[1] || match[4];\n        lineNumber = match[2] || match[5];\n      }\n    }\n  }\n\n  return {\n    fileName: fileName,\n    lineNumber: lineNumber === null ? lineNumber : parseInt(lineNumber, 10)\n  };\n};\n"}